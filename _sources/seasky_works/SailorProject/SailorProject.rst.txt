================
Sailor Project
================

最新版本
========

- 下载地址

  .. seealso:: - GitHub下载地址: `SerialScope git <https://github.com/SEASKY-Master/SerialScope>`_ .
               - Gitee下载地址: `SerialScope gitee <https://gitee.com/SeaskyL/SerialScope.git>`_ .


软件截图
========

  .. image:: ./image/serialport1.jpg
    :width: 800 px
    :align: center

  .. image:: ./image/serialport2.jpg
    :width: 800 px
    :align: center

  .. image:: ./image/serialport3.jpg
    :width: 800 px
    :align: center

  .. image:: ./image/serialport4.jpg
    :width: 800 px
    :align: center

  .. image:: ./image/serialport5.jpg
    :width: 800 px
    :align: center



Sailor Project功能说明
============================

功能
*************

  .. image::  ./image/serialport6.jpg
    :width: 800 px
    :align: center

操作说明
*************

.. hint::
    注意由于QT自带文本显示窗口加载大量数据后会造成软件卡顿，现解决方案为设定一个显示缓冲区，在有刷新数据阶段（即串口接收数据阶段），如果需要保持刷新状态（即实时显示接收得数据），则仅显示显示缓冲区的内容，你可以使用鼠标移动向上滚动条，停止数据刷新，同时当你向上移动滚动条到一定程度，便会开始加载所有数据，如果你想再次触发实时刷新数据状态，只需要将滚动条移动到最低端，并确保有数据接收。

.. important::
    由于保存数据为显示界面的数据，如果出于刷新状态，则无法保存所有数据，正确的做法是关闭串口后，将滚动条移动到最顶端，加载全部数据，然后保存窗口数据。


Seasky串口协议数据显示界面操作说明
***************************************

- :doc:`SEASKY串口通信协议 <./../uart_protocol>`
  
  ``SEASKY串口通信协议`` 详细介绍 

- :doc:`SEASKY-BMI088技术手册 <./../bmi088>`
  
  ``SEASKY串口通信协议`` 典型案例

.. note::
    - 当使能 ``协议使能`` 后该界面开始工作
    - 当使能 ``发送使能`` 后会以固定频率发送按协议打包好的数据
    - 在 ``协议使能`` 时不可以设置数据名称和单位，仅在 ``协议使能`` 未被按下时可以设定
    - 点击  ``模块选择`` 下拉菜单的 ``增加模块`` 可以添加模块，此部分功能用于存储数据名称和单位，并将模块名称和单位保存到 ``ModulePath/`` 路径的 ``.ini`` 文件中，如果需要删除模块则删除对应模块的 ``.ini`` 文件即可

.. hint::
    注意由于QT自带文本显示窗口加载大量数据后会造成软件卡顿，现解决方案为设定一个显示缓冲区，在有刷新数据阶段（即串口接收数据阶段），如果需要保持刷新状态（即实时显示接收得数据），则仅显示显示缓冲区的内容，你可以使用鼠标移动向上滚动条，停止数据刷新，同时当你向上移动滚动条到一定程度，便会开始加载所有数据，如果你想再次触发实时刷新数据状态，只需要将滚动条移动到最低端，并确保有数据接收。

.. important::
    由于保存数据为显示界面的数据，如果出于刷新状态，则无法保存所有数据，正确的做法是关闭串口后，将滚动条移动到最顶端，加载全部数据，然后保存窗口数据。


波形显示界面操作说明
**********************

.. important::
   该界面仍基于 ``Seasky串口协议``，因此需要使能 ``协议使能`` ，如果需要设定16位寄存器值，还需要使能 ``发送使能``

.. note::
   - 当鼠标移动到波形显示界面，并点击 :guilabel:`鼠标右键` 此时会弹出相应菜单，此时可以依次添加显示曲线，如果未添加对应曲线，就算有数据也不会显示
   - 在有曲线的状态下，:guilabel:`鼠标右键` ，可以删除所有曲线或者隐藏所有曲线，同时也可以触发 ``AUTO`` 自动刷新Y轴坐标范围 ,``实时刷新`` 自动追踪最新数据 
   - 待添加完曲线后，可以看到曲线名称和曲线的线性以及颜色显示窗口，当鼠标移动到此窗口后，点击 :guilabel:`鼠标右键` 可以调整此界面显示位置
   - 当选中曲线后，移动鼠标，会有光标的自动追踪，将显示对应（x,y）坐标，如果超出曲线范围，则显示 0 ，在选中曲线时 点击 :guilabel:`鼠标右键` 可以删除或者隐藏选中曲线
   - 鼠标双击 ``曲线名称`` 可以设定曲线名称,选中曲线后 :guilabel:`鼠标右键`  可以设定曲线颜色
   - 当处于 ``静态界面`` 时,如果移动鼠标选中 `X轴` 则鼠标滚轮转动只能调节 `X轴` 宽度，并只能拖动曲线在 `X轴` 上左右移动（:guilabel:`鼠标左键` 拖动）
   - 当处于 ``静态界面`` 时,如果移动鼠标选中 `Y轴` 则鼠标滚轮转动只能调节 `Y轴` 宽度，并只能拖动曲线在 `Y轴` 上左右移动（:guilabel:`鼠标左键` 拖动）
   - 快捷键: 当按下  :kbd:`Ctrl+Alt+X` 时,则鼠标滚轮转动只能调节 `X轴` 宽度，并只能拖动曲线在 `X轴` 上左右移动（:guilabel:`鼠标左键` 拖动）
   - 快捷键: 当按下  :kbd:`Ctrl+Alt+V` 时,则鼠标滚轮转动只能调节 `Y轴` 宽度，并只能拖动曲线在 `Y轴` 上左右移动（:guilabel:`鼠标左键` 拖动）

.. attention::
   - ``实时刷新`` 状态时，曲线会一直自动刷新 `Y轴` 并追踪最新数据，该状态可以向右拖动曲线退出
   - ``静态界面`` 状态时，曲线不会进行刷新，界面显示定时器关闭，此时可以通过 :guilabel:`鼠标右键` 进入 ``实时刷新`` 状态， 或自动刷新Y轴坐标范围
   - X轴宽度只能手动调整


帮助界面
**********************

- 协议部分相关说明

关于
**********************

- 软件支持信息



