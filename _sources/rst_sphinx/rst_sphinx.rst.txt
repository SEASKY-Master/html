
==================================
reStructuredText快速入门
==================================

reStructuredText简介
======================

- reStructuredText是什么

reStructuredText是扩展名为.rst的纯文本文件，含义为”重新构建的文本“，是python编程语言的Docutils项目的一部分。简单的来说reStructuredText是一种轻量级的文本标记语言，简单易读，所见即所得的文本标记语言。简写：rst。

- 保存格式

保存的文件通常情况下以.rst为后缀。在需要的时候.rst文件可以被转化成PDF或者HTML格式，也可以有Sphinx转化为LaTex,man等格式，现在被广泛的用于程序的文档撰写。

- 编辑工具

Sphinx ，它允许开发人员以纯文本格式编写文档，以便采用满足不同需求的格式轻松生成输出。它使用 reStructuredText标记语法来提供文档控制，可以将 Sphinx想像成为一种文档框架：它会抽象化比较单调的部分，并提供自动函数来解决一些常见问题，比如突出显示标题索引和特殊代码（在显示代码示例时），以及突出显示适当的语法。


reStructuredText vscode 环境配置
=================================

- 安装 sphinx和自动build插件 ::

    pip install sphinx sphinx-autobuild

- 安装 restructuredtext-lint ::

    pip install restructuredtext-lint

- VScode插件安装 ::

    reStructuredText ->它提供了.rst文件的预览功能十分便捷。
    Table Formatter  ->表格自动补全而且效果十分美观。

- 新建写作项目,终端输入并按提示配置 ::

    sphinx-quickstart

- 安装主题、个人推荐（切换该主题还需要配置） ::

    pip install sphinx_rtd_theme

- 实时预览 

  - 配置vscode的json文件 ::

      {
          "restructuredtext.builtDocumentationPath": "${workspaceRoot}/build/html",
          "restructuredtext.confPath": "${workspaceFolder}\\source",
          "restructuredtext.updateOnTextChanged": "false",
          "python.pythonPath": "C:/Users/Liuwei/AppData/Local/Programs/Python/Python37/python.exe"
      }

  - 终端输入 ::

    sphinx-autobuild docs docs/build/html

- 导出html ::

    make clean
    make html


Sphinx简单使用
==================

- 使用``mkdir docs``创建一个目录，然后``cd``到此目录，如果也可以手动创建目录；

- 使用命令创建工程（按提示输入相关配置） ::

    sphinx-quickstart

- 创建后目录结构如下 ::

    .
    ├── build
    |        
    ├── source ———— ├── conf.py
    |               └── index.rst
    ├── make.bat
    └── Makefile

- 修改``conf.py``配置（只列出修改主题部分，其他更多设置百度自行了解） ::

    # HTML输出应该使用的“主题”。
    html_theme = 'sphinx_rtd_theme'

- 实时预览 ::

    sphinx-autobuild docs docs/build/html

- 导出``html``文件（导出``index.html``见``build``的``html``目录） ::

    make clean 
    make html

reStructuredText简单入门
==========================

章节 (Section Structure)
--------------------------

- 以下是所有有效的节标题装饰字符,遇到的第一个样式将是最外层的标题(如HTMLH1)，第二个样式将是一个副标题，第三个样式将是一个副标题，依此类推，因此没有固定的表示方式。 ::

    ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~

- 章节头部 ( 参考 ) 由下线(也可有上线)和包含标点的标题 组合创建, 其中下线要至少等于标准文本的长度, 如: ::

    ======
    Title
    ======

    Subtitle1
    ---------

    SubSubtitle
    +++++++++++

    Subtitle2
    -----------

- 通常没有专门的符号表示标题的等级, 但是对于Python 文档, 可以使用如下约定: ::

    # 下划线及上划线表示 部分
    * 下划线及上划线表示 章节
    = 下划线表示 小章节
    - 下划线表示 子章节
    ^ 下划线表示 子章节的子章节
    " 下划线表示 段落

段落 (Paragraphs)
------------------

- 段落由空白行分割, 且应左对齐, 与Markdown相同; ::

    这是第一段

    这是第二段
    这个还是第二段

- 被渲染成:

这是第一段

这是第二段
这个还是第二段


行内标记 (Inline Markup)
-------------------------


+--------------------------------+----------------------------+--------------------------------+
|              代码              |        解析渲染结果        |              注解              |
+================================+============================+================================+
| ``*emphasis*``                 | *emphasis*                 | 通常渲染成斜体, 与Markdown相同 |
+--------------------------------+----------------------------+--------------------------------+
| ``**emphasis**``               | **emphasis**               | 通常渲染成粗体, 与Markdown相同 |
+--------------------------------+----------------------------+--------------------------------+
| ```interpreted text```         | `interpreted text`         | 强调解释.                      |
+--------------------------------+----------------------------+--------------------------------+
| ````inline literal````         | ``inline literal``         | 常用于行内代码, 与Markdown相同 |
+--------------------------------+----------------------------+--------------------------------+
| ``A :sub:`xxx```               | A :sub:`xxx`               | 下标(subscript)                |
+--------------------------------+----------------------------+--------------------------------+
| ``A :sup:`xxx```               | A :sup:`xxx`               | 上标(superscript)              |
+--------------------------------+----------------------------+--------------------------------+
| ``:guilabel:`Action```         | :guilabel:`Action`         | GUI labels                     |
+--------------------------------+----------------------------+--------------------------------+
| ``:kbd:`Ctrl+Shift```          | :kbd:`Ctrl+Shift`          | Key-bindings                   |
+--------------------------------+----------------------------+--------------------------------+
| ``:menuselection:`A-->B-->C``` | :menuselection:`A-->B-->C` | 菜单选择                       |
+--------------------------------+----------------------------+--------------------------------+


列表 (Lists)
--------------

- 代码示例 ::

    无序列表使用 ``-`` , ``*`` , ``+`` 来标记:

    - 无序列表第一项
    - 无序列表第二项

    有序列表使用 ``num.`` 来标记:

    1. 有序列表第一项
    2. 有序列表第二项

    自动编号列表必须使用 ``#.`` 来标记:

    #. 自动编号的列表第一项
    #. 自动编号的列表第二项

    这是一个定义列表:

    term
        术语定义必须缩进

        可以包含多个段落

    next term
        术语描述

    下面是一个嵌套列表, 每一级别向右缩进一次, 同级别缩进应相同:

    1. 有序列表第一项
        * 无序列表第一项
        * 无序列表第二项
    #. 有序列表第二项
        + 无序列表第一项
        + 无序列表第二项

- 解析渲染结果

无序列表使用 ``-`` , ``*`` , ``+`` 来标记:

- 无序列表第一项
- 无序列表第二项

有序列表使用 ``num.`` 来标记:

1. 有序列表第一项
2. 有序列表第二项

自动编号列表必须使用 ``#.`` 来标记:

#. 自动编号的列表第一项
#. 自动编号的列表第二项

这是一个定义列表:

term
    术语定义必须缩进

    可以包含多个段落

next term
    术语描述

下面是一个嵌套列表, 每一级别向右缩进一次, 同级别缩进应相同:

1. 有序列表第一项
    * 无序列表第一项
    * 无序列表第二项
#. 有序列表第二项
    + 无序列表第一项
    + 无序列表第二项


 源代码 (Source Code)
 --------------------

- 标记符号 :: 紧接一空白行, 然后紧跟代码, 整个代码文本块必须缩进 (同所有的段落一样, 使用空白行和周围文本完成分隔), 如:

::

    ::

        some codes
        some codes
        some codes

    没有缩进, 这里不是代码, 是正常段落!
- 解析渲染结果

::

    some codes
    some codes
    some codes

没有缩进, 这里不是代码, 是正常段落!


- 此外, 高级的代码高亮功能可是使用 .. code-block:: , 举例: ::

    .. code-block:: python
      :caption: Code Blocks can have captions.
      :linenos:
      :emphasize-lines: 3,5

      def some_function():
          interesting = False
          print 'This line is highlighted.'
          print 'This one is not...'
          print '...but this one is.'

- 解析渲染结果

.. code-block:: python
   :caption: Code Blocks can have captions.
   :linenos:
   :emphasize-lines: 3,5

   def some_function():
       interesting = False
       print 'This line is highlighted.'
       print 'This one is not...'
       print '...but this one is.'

    
侧边栏 (Sidebar)
-----------------

- 侧边栏举例 ::

    .. sidebar:: 这是一个侧边栏

        这是一个侧边栏, 可以放入代码, 也可以放入图像代码等等, 它下面可以是文字, 图像, 代码等等, 如本例中下面是一段文字.

    | 为你执剑，千山越尽不知倦，万水覆河山，纵惊涛拍岸，天地血染。跨马临崖斜阳暖，许你一生的誓言，不变，只因你，我今生唯一的眷恋。破狼为斗，孤星寒；乱世红尘，七杀斩。紫微斗天，何堪？乱世之引，以一剑开天，不忍你看这浮生的离乱，却终是以这破碎的江山，葬了红颜！
    | 一壶清酒，一抹心事，一池风华。捻斑驳岁月，把往事化作墨香，流泻指尖；携一脉清泉，镌刻成嫣然一笑，淡观风云；坐岁月深处，将心音谱成一缕荡涤纤尘的天籁，翩然舞出一世的缱绻。此岸，彼岸；此端，彼端。坚守内心的纯净明澈，染一指姹紫嫣红，碎一地风清露冷，静卧风莲，微笑红尘。

- 解析渲染结果

.. sidebar:: 这是一个侧边栏

    这是一个侧边栏, 可以放入代码, 也可以放入图像代码等等, 它下面可以是文字, 图像, 代码等等, 如本例中下面是一段文字.

| 为你执剑，千山越尽不知倦，万水覆河山，纵惊涛拍岸，天地血染。跨马临崖斜阳暖，许你一生的誓言，不变，只因你，我今生唯一的眷恋。破狼为斗，孤星寒；乱世红尘，七杀斩。紫微斗天，何堪？乱世之引，以一剑开天，不忍你看这浮生的离乱，却终是以这破碎的江山，葬了红颜！
| 一壶清酒，一抹心事，一池风华。捻斑驳岁月，把往事化作墨香，流泻指尖；携一脉清泉，镌刻成嫣然一笑，淡观风云；坐岁月深处，将心音谱成一缕荡涤纤尘的天籁，翩然舞出一世的缱绻。此岸，彼岸；此端，彼端。坚守内心的纯净明澈，染一指姹紫嫣红，碎一地风清露冷，静卧风莲，微笑红尘。

表格 (Tables)
-------------

支持三种表格,网格表格、简单表格、CSV表格

- 网格表格
::

    .. table:: Grid Table Demo
      :name: table-gridtable

      +------------------------+----------+----------+----------+
      | Header row, column 1   | Header 2 | Header 3 | Header 4 |
      | (header rows optional) |          |          |          |
      +========================+==========+==========+==========+
      | body row 1, column 1   | column 2 | column 3 | column 4 |
      +------------------------+----------+----------+----------+
      | body row 2             | ...      | ...      |          |
      +------------------------+----------+----------+----------+


    可以使用 :ref:`table-gridtable` 引用（对应代码 ``:ref:`table-gridtable```）, 在Sphinx中还可以使用 :table:numref:`table-gridtable` 来引用。


.. table:: Grid Table Demo
   :name: table-gridtable

   +------------------------+----------+----------+----------+
   | Header row, column 1   | Header 2 | Header 3 | Header 4 |
   | (header rows optional) |          |          |          |
   +========================+==========+==========+==========+
   | body row 1, column 1   | column 2 | column 3 | column 4 |
   +------------------------+----------+----------+----------+
   | body row 2             | ...      | ...      |          |
   +------------------------+----------+----------+----------+


可以使用 :ref:`table-gridtable` 引用（对应代码 ``:ref:`table-gridtable```）, 在Sphinx中还可以使用 :table:numref:`table-gridtable` 来引用。


- 简单表格

简单表格书写简单, 但有一些限制: 需要有多行, 且第一列元素不能分行显示, 如下: ::

    =====  =====  =======
    A      B      A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======

将被渲染成:

=====  =====  =======
A      B      A and B
=====  =====  =======
False  False  False
True   False  False
False  True   False
True   True   True
=====  =====  =======

- CSV表格: ::

    .. csv-table:: Frozen Delights!
      :header: "Treat", "Quantity", "Description"
      :widths: 15, 10, 30

      "Albatross", 2.99, "On a stick!"
      "Crunchy Frog", 1.49, "If we took the bones out, it wouldn't be
      crunchy, now would it?"
      "Gannet Ripple", 1.99, "On a stick!"

将被渲染成:

.. csv-table:: Frozen Delights!
   :header: "Treat", "Quantity", "Description"
   :widths: 15, 10, 30

   "Albatross", 2.99, "On a stick!"
   "Crunchy Frog", 1.49, "If we took the bones out, it wouldn't be
   crunchy, now would it?"
   "Gannet Ripple", 1.99, "On a stick!"

.. tip:: 在`Vscode`里面可以使用`Table Formatter`工具快速填充表格

直接标记 (Explicit Markup)
--------------------------

直接标记用于处理reST中的特殊内容, 如脚注, 高亮段落, 注释以及通用指令.

直接标记的标记符号是: 顶格的两个句点紧跟一个空格 ``..`` , 其后会紧跟直接标记对象, 如 ``.. NOTE:: some notes`` 将对应一个注解, ``.. image:: imagepath`` 对应一幅图像, 会被渲染成 ``imagepath`` 所表示的图像.

如果紧跟的是普通文本, 相当于代码注释或者叫评论,  如 ``.. some comments`` 则不会渲染显示, 又如: ::

   .. 这是一个注释, 你只能在源码中看到我, 我不会被渲染出来.

*渲染结果:*

.. 这是一个注释, 你只能在源码中看到我, 我不会被渲染出来.

可以通过缩进产生多行注释::

   ..
      这整个缩进块都是
      一个注释.
      你只能在源码中看到我们, 我们不会被渲染出来

      仍是一个评论.

   你可以看到我, 我不是注释.

**渲染结果:**

..
  这整个缩进块都是
  一个评论.
  你只能在源码中看到我们, 我们不会被渲染出来

  仍是一个评论.

你可以看到我, 我不是注释.

.. NOTE:: 下面涉及的很多语法, 都和直接标记 ``.. `` 有关, 如脚注, 引文, 超链接, 指令, 注释等等.

指令 (Directives)
-----------------

指令(ref)是显式标记的通用块。与角色一起，它是reST的扩展机制之一，Sphinx大量使用它。

Docutils支持以下指令:

- 警告:注意、小心、危险、错误、提示、重要、注意、提示、警告和一般警告。(大部分主题都特别只写“注意”和“警告”。)

- 图像:

  - 图像(另请参见下面的图像)

  - 图(带有标题和可选图例的图像)

- 附加车身元件:

  - 目录(本地目录，即仅用于当前文件的目录)

  - 容器(带有自定义类的容器，用于在HTML中生成外部< div >

  - 标题(与文件分割无关的标题)

  - 主题，侧边栏(特别突出显示的正文元素)

  - 解析文字(支持内联标记的文字块)

  - 词牌(带有可选归属线的块引用)

  - 突出显示，拉引号(用自己的类属性阻止引号)

  - 复合(复合段落)

- 特殊表格:

  - 表格(有标题的表格)

  - CSV-表格(由逗号分隔值生成的表格)

  - 列表-表格(从列表中生成的表格)

- 特殊指令:

  - 原始(包括原始目标格式标记)

  - include(包含来自另一个文件的重构文本)-在Sphinx中，当给定一个绝对包含文件路径时，该指令将其作为相对于源目录的路径

  - class(为下一个元素分配class属性)1

- HTML细节:

  - 元(生成超文本标记语言<元>标签，参见下面的超文本标记语言元数据)

  - 标题(覆盖文档标题)

- 影响标记:

  - 默认角色(设置新的默认角色)

  - 角色(创建新角色)

因为这些只是针对每个文件的，所以最好使用Sphinx的工具来设置默认角色。

- 警告和提示
.. attention:: 注意``.. attention:: ``
.. caution:: 小心``.. caution:: ``
.. danger:: 危险``.. danger:: ``
.. error:: 错误``.. error:: ``
.. hint:: 提示``.. hint:: ``
.. important:: 重要``.. important:: ``
.. note:: 注释``.. note:: ``
.. tip:: 提示``.. tip:: ``
.. warning:: 警告``.. warning:: ``

- 图像添加::

    .. image:: picture.jpeg
      :height: 100px
      :width: 200 px
      :scale: 50 %
      :alt: alternate text
      :align: right

.. seealso:: Sphinx 中的 reST 教程中的 `指令` 部分: `<http://www.sphinx-doc.org/en/stable/rest.html#directives>`_ .


数学公式指令
--------------

数学公式指令 ``math``

支持LaTex数学语法, 以及公式引用 (通过 ``:eq:`x x x``` 引用), 如我是下面的带标签公式 :eq:`This is a label` , 示例: 
::

    行内公式 :math:`\alpha > \beta` :

    Display 公式:

    .. math::

        n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k

    带标签公式:

    .. math::
       :label: This is a label

        n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k

    多行公式:

    .. math::

       (a + b)^2 = a^2 + 2ab + b^2

       (a - b)^2 = a^2 - 2ab + b^2

    对齐多行公式:

    .. math::

       (a + b)^2  &=  (a + b)(a + b) \\
                  &=  a^2 + 2ab + b^2

**将被渲染成**:


行内公式 :math:`\alpha > \beta` :

Display 公式:

.. math::

    n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k

带标签公式:

.. math::
    :label: This is a label

    n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k


多行公式:

.. math::

    (a + b)^2 = a^2 + 2ab + b^2

    (a - b)^2 = a^2 - 2ab + b^2

对齐多行公式:

.. math::

    (a + b)^2  &=  (a + b)(a + b) \\
    &=  a^2 + 2ab + b^2

.. hint::

    - 当使用MathJax对数学公式渲染时, 可能不能达到预期效果, 请参考 :ref:`SecSphinxMathSupport` ;

    - 关于Sphinx中的如何使用Katex渲染公式, 参见 :ref:`SecSphinxMathSupport` .

    - 关于Sphinx中的如何使用定义定理等环境, 参见 :ref:`SubSubSection_SphinxcontribProof` ;



.. seealso::
  更多内容参考reST手册, `这里 <http://docutils.sourceforge.net/docs/ref/rst/directives.html#math>`_ .
  关于Sphinx中对数学公式的支持部分, 请参考 `Math support in Sphinx <http://www.sphinx-doc.org/en/stable/contents.html#document-ext/math>`_ . 或 :ref:`SecSphinxMathSupport` .


图像
--------

- 图像指令 ``image``

即通过 ``.. image:: imagepath`` 实现插入图像: ::

    .. image:: picture.jpeg
      :height: 100px
      :width: 200 px
      :scale: 50 %
      :alt: 对于不能显示图片的时候, 显示这些文字
      :align: right

    .. figure:: picture.png
      :scale: 50 %
      :alt: map to buried treasure

      This is the caption of the figure (a simple paragraph).

      The legend consists of all elements after the caption.  In this
      case, the legend consists of this paragraph

    .. figure:: ../_static/figs/mkdocs/insertfigure.png
      :width: 1024
      :scale: 50%
      :align: center

      大唐芙蓉园 - This is the caption of the figure (a simple paragraph).

        The legend consists of all elements after the caption.  In this
        case, the legend consists of this paragraph.

主题
-----

reST 标记代码:::

    .. topic:: Topic Title

        Subsequent indented lines comprise
        the body of the topic, and are
        interpreted as body elements.
        
    .. sidebar:: Sidebar Title
      :subtitle: Optional Sidebar Subtitle

      Subsequent indented lines comprise
      the body of the sidebar, and are
      interpreted as body elements.

被渲染成


.. topic:: Topic Title

    Subsequent indented lines comprise
    the body of the topic, and are
    interpreted as body elements.

.. sidebar:: Sidebar Title
   :subtitle: Optional Sidebar Subtitle

   Subsequent indented lines comprise
   the body of the sidebar, and are
   interpreted as body elements.


超链接 (Hyperlinks)
---------------------

外部链接
^^^^^^^^^

使用 ```Link text <http://example.com/>`_`` 来表示超链接, 将被渲染成 `Link text <http://example.com/>`_ 如果文字本身就是链接, 那不用作任何标记, 解析器可以自动将链接和邮箱地址转换为超链接.

也可以单独定义链接目标用引用: ::

    这是一个超链接 `a link`_.

    .. _a link: http://example.com/

渲染成:

这是一个超链接 `a link`_.

.. _a link: http://example.com/

.. tip:: 在Markdown中, 插入链接很简单, ``[Link Text](http://example.com/)`` 即可.



内部链接
^^^^^^^^^

1. 首先需要在标题, 图像, 表等对象前放置一个标签 ``.. _label:``, 比如我在上幅图上方放置了一个标签 ``figure-datangfurongyuan`` , 注意空白行: ::

    .. _figure-datangfurongyuan:

    .. figure:: ../_static/figs/mkdocs/insertfigure.png
    ...


2. 引用. 通过 ``:ref:`label``` , 接上例, 使用 ``:ref:`figure-datangfurongyuan``` 引用, 那么渲染结果为: :ref:`figure-datangfurongyuan`, 点击会跳到图像位置.

.. tip:: 其它的交叉引用, 请参考手册 `交叉引用部分 <http://sphinx-doc-zh.readthedocs.io/en/latest/markup/inline.html#ref-role>`_,


脚注 (Footnotes)
-----------------

包含两步:

- 在文档底部放置脚注主体, 以 ``rubric`` 指令标示: ::

    .. rubric:: Footnotes

    .. [#name] 这里是脚注内容

- 在需要插入脚注的地方插入脚注名 ``[#name]``

其中, 使用 ``[#name]_`` 可以实现自动编号, 当然你也可以使用数字来指示确定的脚注编号 ``[1]_`` .

举例:

::

    我后面插入了一个自编号的脚注 [#f1]_ , 后面又跟了一个手动编号的脚注 [2]_ , 后面还跟着一个自动编号的 [#fn]_ .

    .. rubric:: Footnotes

    .. [#f1] 我是自编号脚注1
    .. [2] 我是手动编号脚注2
    .. [#fn] 我是自编号脚注3

我后面插入了一个自编号的脚注 [#f1]_ , 后面又跟了一个手动编号的脚注 [2]_ , 后面还跟着一个自动编号的 [#fn]_ .

.. rubric:: Footnotes

.. [#f1] 我是自编号脚注1
.. [2] 我是手动编号脚注2
.. [#fn] 我是自编号脚注3




引文 (Citations)
-----------------

Sphinx支持标准的 reST 引文, 此外, 在Sphinx里, 所有的引文都是全局的, 所有文件都能引用任意的文献, 像下面这样使用引文: ::

    Lorem ipsum [Ref]_ dolor sit amet.

    .. [Ref] Book or article reference, URL or whatever.

Lorem ipsum [Ref]_ dolor sit amet.

.. [Ref] Book or article reference, URL or whatever.

引文的用法与脚注用法相似, 但标签不是数字, 也不是以 ``#`` 开头.

.. hint::
    关于Sphinx中如何使用 ``bibtex`` 参考文献, 请参考 :ref:`SubSubSection_SphinxcontribBibtex` 小结.

替换 (Substitutions)
-----------------------

reST 支持替换, 你可以像下面这样使用替换:

首先定义替换操作: ::

    .. |name| replace:: 替换文本

或者: ::

    .. |caution| image:: warning.png
                 :alt: Warning!

然后在需要替换的地方使用 ``|name|`` , 或者 ``|caution|``

**示例1**:

reST源码:

::

    你看到了吗? 第二个单词 word |word| !

    .. |word| replace:: 替换成我了

被渲染成:

你看到了吗? 第二个单词 word |word|!

.. |word| replace:: 替换成我了


Sphinx扩展指令
-----------------

有关Sphinx的扩展指令, 如 **目录树** , **术语** , **特定语法着色** 等, 请移步本手册 :ref:`SphinxExtensionDirectives` 指南, 或参考Sphinx官方手册 `The TOC tree <http://www.sphinx-doc.org/en/stable/markup/toctree.html>`_ 部分.

额外的主体元素
------------------

- ``contents <table-of-contents>`` (本地, 仅是当前文件的内容表格)
- ``container`` (自定义容器, 用来生成HTML的 ``<div>`` )
- ``rubric`` (和文档章节无关的标题)
- ``topic``  (高亮显示的主体元素)
- ``parsed-literal`` (支持内联标记的斜体模块)
- ``epigraph`` (可选属性行的摘要模块)
- ``highlights`` (有自己的类属性的摘要模块)
- ``compound`` ( 复合段落)


专用表格
------------------

- ``table`` (有标题的表格)
- ``csv-table`` (CSV自动生成表格)
- ``list-table`` (列表生成的表格)

专用指令
------------------

- ``raw`` (包含原始格式的标记)
- ``include`` (包含reStructuredText标记的文件)
    - 在Sphinx中,如果包含绝对文件路径, 指令会以源目录地址做为参照
- ``class`` (将类属性指派给下一个元素)

HTML 特性
------------------

- ``meta`` (生成HTML ``<meta>`` 标签)
- ``title`` (覆盖文档标题)

* 影响标记:

- ``default-role`` (设置新的默认角色)
- ``role`` (创建新的角色)

Sphinx 新增指令可查阅 `Sphinx Markup Constructs <http://www.sphinx-doc.org/en/stable/markup/index.html>`_ .
